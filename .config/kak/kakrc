# Config inspirations:
# https://github.com/andreyorst/dotfiles/tree/master/.config/kak

#= Map as soon as possible, in case of configuration errors
map global user ,     ': edit "%val{config}/kakrc"<ret>'   -docstring 'Edit config'
map global user <a-,> ': source "%val{config}/kakrc"<ret>' -docstring 'Source config'
map global user /     ': comment-line<ret>'  -docstring 'comment line'
map global user <a-/> ': comment-block<ret>' -docstring 'comment block'

add-highlighter global/wrap wrap -word -indent -marker 'Â¬ '
set global autocomplete ''

require-module kak
add-highlighter shared/kakrc/code/if_else regex \b(if|when|unless)\b 0:keyword

define-command true -params 2 %{ eval %arg{1} }
define-command false -params 2 %{ eval %arg{2} }
define-command if -params 3 %{ eval -verbatim %arg{1} %arg{2} %arg{3} }
define-command when -params 2 %{ eval -verbatim %arg{1} %arg{2} nop }
define-command unless -params 2 %{ eval -verbatim %arg{1} nop %arg{2} }

define-command -docstring 'Copy position' copy-position %{
    eval %sh{
        echo "set-register dquote \"$kak_selection:\\n    $(realpath --relative-to=$PWD $kak_buffile):$kak_cursor_line:$kak_cursor_column\""
    }
}
# map global user x ': copy-position<ret>' -docstring 'Copy position'

#= Plugins
# bootstrap the plugin manager
evaluate-commands %sh{
    plugins="${kak_config:?}/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak.git --branch master "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}

set-option global plug_always_ensure true
set-option global plug_profile true

# plug "andreyorst/powerline.kak" defer powerline %{
#     set-option global powerline_separator ''
#     set-option global powerline_separator_thin ''
# } config %{
#     powerline-start
# }
# plug "lenormf/kakoune-extra"
plug-chain "andreyorst/plug.kak" noload \
plug 'delapouite/kakoune-text-objects' \
plug "occivink/kakoune-vertical-selection" \
plug "occivink/kakoune-find" \
plug "andreyorst/fzf.kak" config %{
    map -docstring 'fzf mode' global normal '<c-p>' ': fzf-mode<ret>'
} defer fzf %{
    set-option global fzf_tmux_popup true
    set-option global fzf_default_opts '--reverse'
    when %sh{ [ -n "$(command -v bat)"  ] && echo true || echo false } %{
        set-option global fzf_highlight_command bat
    }
} plug "andreyorst/smarttab.kak" defer smarttab %{
    # when `backspace' is pressed, 4 spaces are deleted at once
    set-option global softtabstop 4
    # configure text that is being used to represent curent active mode
    set-option global smarttab_expandtab_mode_name   'exp'
    set-option global smarttab_noexpandtab_mode_name 'noexp'
    set-option global smarttab_smarttab_mode_name    'smart'
} config %{
    hook global BufSetOption filetype=.* expandtab
    hook global BufSetOption filetype=(makefile) noexpandtab
} plug "andreyorst/kaktree" defer kaktree %{
    map global user f ': kaktree-toggle<ret>' -docstring 'kaktree filetree panel'
    # Enter '?' for help
    set-option global kaktree_show_help false
} config %{
    hook global WinSetOption filetype=kaktree %{
        remove-highlighter buffer/numbers
        remove-highlighter buffer/matching
        remove-highlighter buffer/wrap
        remove-highlighter buffer/show-whitespaces
    }
    kaktree-enable
} plug "danr/kakoune-easymotion" config %{
    map global easymotion <a-x> '<esc>: easy-motion-char<ret>'  -docstring 'char'
    map global easymotion x '<esc>: easy-motion-word<ret>'      -docstring 'word'
    map global easymotion X '<esc>: easy-motion-line<ret>'      -docstring 'line'
    map global user e ': enter-user-mode<space>easymotion<ret>' -docstring 'easymotion'
} plug 'delapouite/kakoune-mirror' %{
  map global user m ': enter-user-mode -lock mirror<ret>' -docstring 'mirror'
} plug "ul/kak-lsp" do %{
    # Install only when it doesn't exist.
    command -v kak-lsp >/dev/null 2>&1 || cargo install --locked --force --path .
} config %{
    # set-option global lsp_server_configuration haxe.haxe.executable="haxe"

    # debug
    # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    map global normal <minus> ': enter-user-mode<space>lsp<ret>'
    hook global WinSetOption filetype=(haxe) %{
        lsp-enable-window
    }
} \
plug "https://gitlab.com/Screwtapello/kakoune-inc-dec"

#= Clipboard
declare-option -docstring 'command to copy to clipboard' \
    str clipboard_copy_cmd
declare-option -docstring 'command to paste from clipboard' \
    str clipboard_paste_cmd
evaluate-commands %sh{
    copy=
    paste=
    case $(uname -s) in
        Darwin)
            copy="pbcopy"
            paste="pbpaste"
            ;;

        *)
            if test -n "$WAYLAND_DISPLAY" \
                && command -v wl-copy >/dev/null \
                && command -v wl-paste >/dev/null
            then
                # wl-clipboard
                copy="wl-copy --foreground"
                paste="wl-paste --no-newline"
            elif test -n "$DISPLAY" && command -v xsel >/dev/null; then
                # xsel
                copy="xsel --input --clipboard"
                paste="xsel --output --clipboard"
            elif test -n "$DISPLAY" && command -v xclip >/dev/null; then
                # xclip
                copy="xclip -in -selection clipboard"
                paste="xclip -out -selection clipboard"
            fi
            ;;
    esac

    echo "set-option global clipboard_copy_cmd '$copy'"
    echo "set-option global clipboard_paste_cmd '$paste'"
}
declare-user-mode clipboard
map -docstring "copy to system clipboard"                   global clipboard 'y' "<a-|>%opt{clipboard_copy_cmd}<ret>:<space>echo -markup %{{Information}yanked selection to system clipboard}<ret>"
map -docstring "cut to system clipboard"                    global clipboard 'd' "|%opt{clipboard_copy_cmd}<ret>"
map -docstring "cut to system clipboard, enter insert mode" global clipboard 'c' "|%opt{clipboard_copy_cmd}<ret>i"
map -docstring "paste from system clipboard before cursor"  global clipboard 'P' "!%opt{clipboard_paste_cmd}<ret>"
map -docstring "paste from system clipboard after cursor"   global clipboard 'p' "<a-!>%opt{clipboard_paste_cmd}<ret>"
map -docstring "replace selection with system clipboard"    global clipboard 'R' "|%opt{clipboard_paste_cmd}<ret>"
map global normal <a-,> ': enter-user-mode<space>clipboard<ret>'


#= Trailing whitespace errors
# Fix trailing whitespace errors
define-command trailine-whitespace-errors-fix -docstring '
Removes trailing whitespace errors
' %{
    try %{
        execute-keys -draft \% s \h+$ <ret> d
    } catch %{
        echo "No trailing whitespace errors"
    }
}


# Show trailing white space errors (except in insert mode)
define-command trailing-whitespace-errors-show -docstring '
Shows trailing whitespace errors
' %{
    add-highlighter global/trailing-whitespace-error regex \h+$ 0:black,red
}
define-command trailing-whitespace-errors-hide -docstring '
Hide trailing whitespace errors
' %{
    remove-highlighter global/trailing-whitespace-error
}
trailing-whitespace-errors-show
hook global ModeChange push:normal:insert -group trailine-whitespace-errors trailing-whitespace-errors-hide
hook global ModeChange pop:insert:normal -group trailine-whitespace-errors trailing-whitespace-errors-show


#= Auto save
# TODO: It changes files - add some lineends, etc...
# - use draft to avoid clearing echo line, so for example ':echo abc' will be able to show its output
# hook global NormalIdle .* -group auto-save 'try %{ exec -draft :w<ret>}'
# hook global ModeChange pop:insert:normal -group auto-save 'try %{exec -draft :w<ret>}'

#= Subwords
def -hidden select-next-subword %{
      exec /[A-Z][a-z]+|[A-Z]+|[a-z]+<ret>
}
def -hidden extend-next-subword %{
      exec ?[A-Z][a-z]+|[A-Z]+|[a-z]+<ret>
}
def -hidden select-prev-subword %{
      exec <a-/>[A-Z][a-z]+|[A-Z]+|[a-z]+<ret>
}
def -hidden extend-prev-subword %{
      exec <a-?>[A-Z][a-z]+|[A-Z]+|[a-z]+<ret>
}

#= Options
# set-option global ui_options 'ncurses_assistant=cat'
# set-option global extra_word_chars '_' '-'

#== Languages
hook global BufSetOption filetype=(ruby|yaml) %{
    set-option buffer indentwidth 2
}


#= Mappings
declare-user-mode project
map global project <(> ' :bp<ret>'                   -docstring 'prev buffer'
map global project <)> ' :bn<ret>'                   -docstring 'next buffer'
map global project b   ' :make build:debug<ret>'     -docstring 'build debug'
map global project r   ' :make build:debug run<ret>' -docstring 'run debug'
map global normal <=>  ' :enter-user-mode<space>project<ret>'

declare-user-mode subword
map global subword w ' :select-next-subword<ret>' -docstring 'next'
map global subword b ' :select-prev-subword<ret>' -docstring 'prev'
map global user x ' :enter-user-mode<space>subword<ret>' -docstring 'subword'

declare-user-mode subwordex
map global subwordex w ' :extend-next-subword<ret>' -docstring 'next'
map global subwordex b ' :extend-prev-subword<ret>' -docstring 'prev'
map global user X ' :enter-user-mode<space>subwordex<ret>' -docstring 'subword (extend)'

#= Colorscheme
# colorscheme base16

#= Imports
source "%val{config}/filetype/haxe.kak"
source "%val{config}/filetype/cocoapods.kak"
source "%val{config}/filetype/csharp.kak"
source "%val{config}/filetype/gradle.kak"
source "%val{config}/filetype/makefile.kak"

# source "%val{config}/expand-tab.kak"

