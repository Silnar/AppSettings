#= Map as soon as possible, in case of configuration errors
map global user ,     ': edit "%val{config}/kakrc"<ret>'   -docstring 'Edit config'
map global user <a-,> ': source "%val{config}/kakrc"<ret>' -docstring 'Source config'
map global user /     ': comment-line<ret>'  -docstring 'comment line'
map global user <a-/> ': comment-block<ret>' -docstring 'comment block'

#= Plugins
source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "andreyorst/smarttab.kak" defer smarttab %{
    # when `backspace' is pressed, 4 spaces are deleted at once
    set-option global softtabstop 4
    # configure text that is being used to represent curent active mode
    set-option global smarttab_expandtab_mode_name   'exp'
    set-option global smarttab_noexpandtab_mode_name 'noexp'
    set-option global smarttab_smarttab_mode_name    'smart'
} config %{
    hook global BufSetOption filetype=.* expandtab
    hook global BufSetOption filetype=(makefile) noexpandtab
}

plug "alexherbo2/yank-ring.kak" config %{
    map global user Y '<esc>: yank-ring<ret>' -docstring "yank-ring"
}

plug "andreyorst/fzf.kak" config %{
    # map global normal <minus> ': fzf-mode<ret>'

    require-module fzf
    map global user 'f'     '<esc>: fzf-file<ret>'                        -docstring "open file"
    map global user 'b'     '<esc>: fzf-buffer<ret>'                      -docstring "open buffer"
    map global user '<a-b>' '<esc>: fzf-delete-buffer<ret>'               -docstring "delete buffer"
    map global user 'g'     '<esc>: fzf-grep<ret>'                             -docstring 'grep file contents recursively'
    map global user 's'     '<esc>: fzf-buffer-search<ret>'               -docstring "search in buffer"
    map global user 'v'     '<esc>: require-module fzf_vcs; fzf-vcs<ret>' -docstring "edit file from vcs repo"
    map global user '<a-v>' '<esc>: fzf-vcs-mode<ret>'                    -docstring "switch to vcs selection mode"
    map global user 'r'     '<esc>: fzf-project<ret>'                     -docstring "open project"
    map global user 'c'     '<esc>: fzf-cd<ret>'                          -docstring "change directory"
    # doesn't work
    # map global user 'y'   '<esc>: fzf-yank-ring<ret>'                   -docstring "open yank-ring"
} defer fzf %{
    set fzf_implementation skim
    set fzf_grep_command rg
}

plug "alexherbo2/phantom.kak" config %{
    map global user H -docstring "phantom add selections" \
        ': phantom-append<ret>'
    map global user h -docstring "phantom restore selections" \
        ': phantom-restore; phantom-clear<ret>'
    map global user <a-h> -docstring "phantom clear selections" \
        ': phantom-clear<ret>'
    # Iterate phantom selections in insert mode.
    map global insert <a-i> -docstring "phantom insert main selection" \
        '<esc>: phantom-append<ret><space>i'
    map global insert <a-a> -docstring "phantom apppend main selection" \
        '<esc>: phantom-append<ret><space>a'
    map global insert <a-n> -docstring "phantom next selection" \
        '<esc>: phantom-append; phantom-restore<ret>)<space>i'
    map global insert <a-p> -docstring "phantom prev selection" \
        '<esc>: phantom-append; phantom-restore<ret>(<space>i'

    # unmap default bindings
    unmap global normal F
    unmap global normal f
    unmap global normal <a-f>
}

plug "danr/kakoune-easymotion" config %{
    # map global normal <a-g> ': enter-user-mode<space>easymotion<ret>'
    declare-user-mode jump
    map global jump c '<esc>: easy-motion-char<ret>'      -docstring 'to char'
    map global jump w '<esc>: easy-motion-word<ret>'      -docstring 'to word'
    map global jump g '<esc>: easy-motion-line<ret>'      -docstring 'to line'
    map global user j ': enter-user-mode<space>jump<ret>' -docstring 'jump'
}

plug 'delapouite/kakoune-mirror' %{
  map global user m ': enter-user-mode -lock mirror<ret>' -docstring 'mirror'
}

plug "alexherbo2/prelude.kak"
plug "alexherbo2/connect.kak" config %{
    def connect-nnn %{
    	connect-terminal sh -c '(NNN_OPENER=edit nnn; NNN_OPENER=edit bash)'
    }
    map global user n ': connect-nnn<ret>' -docstring 'nnn'
}

plug "ul/kak-lsp" do %{
    # Install only when it doesn't exist.
    command -v kak-lsp >/dev/null 2>&1 || cargo install --locked --force --path .
} config %{
    # set-option global lsp_server_configuration haxe.haxe.executable="haxe"

    # debug
    # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    map global normal <minus> ': enter-user-mode<space>lsp<ret>'
    hook global WinSetOption filetype=(haxe) %{
        lsp-enable-window
    }
}

# plug "lenormf/kakoune-extra"

plug "occivink/kakoune-find"

plug "https://gitlab.com/Screwtapello/kakoune-inc-dec"

plug "andreyorst/kaktree" config %{
    hook global WinSetOption filetype=kaktree %{
        remove-highlighter buffer/numbers
        remove-highlighter buffer/matching
        remove-highlighter buffer/wrap
        remove-highlighter buffer/show-whitespaces
    }
    kaktree-enable

    map global user t ': kaktree-toggle<ret>' -docstring 'kaktree'
}


#= Clipboard
declare-option -docstring 'command to copy to clipboard' \
    str clipboard_copy_cmd
declare-option -docstring 'command to paste from clipboard' \
    str clipboard_paste_cmd
evaluate-commands %sh{
    copy=
    paste=
    case $(uname -s) in
        Darwin)
            copy="pbcopy"
            paste="pbpaste"
            ;;

        *)
            if test -n "$WAYLAND_DISPLAY" \
                && command -v wl-copy >/dev/null \
                && command -v wl-paste >/dev/null
            then
                # wl-clipboard
                copy="wl-copy --foreground"
                paste="wl-paste --no-newline"
            elif test -n "$DISPLAY" && command -v xsel >/dev/null; then
                # xsel
                copy="xsel --input --clipboard"
                paste="xsel --output --clipboard"
            elif test -n "$DISPLAY" && command -v xclip >/dev/null; then
                # xclip
                copy="xclip -in -selection clipboard"
                paste="xclip -out -selection clipboard"
            fi
            ;;
    esac

    echo "set-option global clipboard_copy_cmd '$copy'"
    echo "set-option global clipboard_paste_cmd '$paste'"
}
declare-user-mode clipboard
map -docstring "copy to system clipboard"                   global clipboard 'y' "<a-|>%opt{clipboard_copy_cmd}<ret>:<space>echo -markup %{{Information}yanked selection to system clipboard}<ret>"
map -docstring "cut to system clipboard"                    global clipboard 'd' "|%opt{clipboard_copy_cmd}<ret>"
map -docstring "cut to system clipboard, enter insert mode" global clipboard 'c' "|%opt{clipboard_copy_cmd}<ret>i"
map -docstring "paste from system clipboard before cursor"  global clipboard 'P' "!%opt{clipboard_paste_cmd}<ret>"
map -docstring "paste from system clipboard after cursor"   global clipboard 'p' "<a-!>%opt{clipboard_paste_cmd}<ret>"
map -docstring "replace selection with system clipboard"    global clipboard 'R' "|%opt{clipboard_paste_cmd}<ret>"
map global normal <a-,> ': enter-user-mode<space>clipboard<ret>'


#= Trailing whitespace errors
# Fix trailing whitespace errors
define-command trailine-whitespace-errors-fix -docstring '
Removes trailing whitespace errors
' %{
    try %{
        execute-keys -draft \% s \h+$ <ret> d
    } catch %{
        echo "No trailing whitespace errors"
    }
}


# Show trailing white space errors (except in insert mode)
define-command trailing-whitespace-errors-show -docstring '
Shows trailing whitespace errors
' %{
    add-highlighter global/trailing-whitespace-error regex \h+$ 0:black,red
}
define-command trailing-whitespace-errors-hide -docstring '
Hide trailing whitespace errors
' %{
    remove-highlighter global/trailing-whitespace-error
}
trailing-whitespace-errors-show
hook global ModeChange push:normal:insert -group trailine-whitespace-errors trailing-whitespace-errors-hide
hook global ModeChange pop:insert:normal -group trailine-whitespace-errors trailing-whitespace-errors-show


#= Auto save
# TODO: It changes files - add some lineends, etc...
# - use draft to avoid clearing echo line, so for example ':echo abc' will be able to show its output
# hook global NormalIdle .* -group auto-save 'try %{ exec -draft :w<ret>}'
# hook global ModeChange pop:insert:normal -group auto-save 'try %{exec -draft :w<ret>}'

#= Options
# set-option global ui_options 'ncurses_assistant=cat'
# set-option global extra_word_chars '_' '-'

#== Languages
hook global BufSetOption filetype=(ruby|yaml) %{
    set-option buffer indentwidth 2
}


#= Mappings
declare-user-mode project
map global project <(> ' :bp<ret>'                   -docstring 'prev buffer'
map global project <)> ' :bn<ret>'                   -docstring 'next buffer'
map global project b   ' :make build:debug<ret>'     -docstring 'build debug'
map global project r   ' :make build:debug run<ret>' -docstring 'run debug'
map global normal <=>  ' :enter-user-mode<space>project<ret>'

#= Colorscheme
# colorscheme base16

#= Imports
source "%val{config}/filetype/haxe.kak"
source "%val{config}/filetype/cocoapods.kak"
source "%val{config}/filetype/gradle.kak"
source "%val{config}/filetype/makefile.kak"

# source "%val{config}/expand-tab.kak"

