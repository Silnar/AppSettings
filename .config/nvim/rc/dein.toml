[[plugins]]
repo = 'Shougo/dein.vim'
rtp = ''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'Shougo/neomru.vim'
lazy = 1
on_if = 1
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/neoyank.vim'
lazy = 1
on_if = 1
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/echodoc.vim'
lazy = 1
on_event = 'CompleteDone'
hook_source = 'call echodoc#enable()'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
lazy = 1
depends = 'context_filetype.vim'
if = "has('lua')"
on_event = 'InsertEnter'
hook_source = '''
  let g:neocomplete#enable_at_startup = 1
  source ~/.vim/rc/plugins/neocomplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
lazy = 1
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
imap <silent>L     <Plug>(neosnippet_jump_or_expand)
smap <silent>L     <Plug>(neosnippet_jump_or_expand)
xmap <silent>L     <Plug>(neosnippet_expand_target)
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#enable_complete_done = 1
let g:neosnippet#expand_word_boundary = 1
" let g:snippets_dir = '~/.vim/snippets/,~/.vim/bundle/snipmate/snippets/'
let g:neosnippet#snippets_directory = '~/.vim/snippets'
'''

[[plugins]]
repo = 'Shougo/unite.vim'
lazy = 1
depends = 'neomru.vim'
on_source = 'denite.nvim'
hook_source = 'source ~/.vim/rc/plugins/unite.rc.vim'
hook_add = '''
  nnoremap <silent> <C-k>
        \ :<C-u>Unite change jump<CR>
  nnoremap <silent> ;g
        \ :<C-u>Unite grep -buffer-name=grep`tabpagenr()`
        \ -auto-preview -no-split -no-empty -resume<CR>
  nnoremap <silent> ;r
        \ :<C-u>Unite -buffer-name=register
        \ -default-action=append register history/yank<CR>
  xnoremap <silent> ;r
        \ d:<C-u>Unite -buffer-name=register
        \ -default-action=append register history/yank<CR>
  nnoremap <silent> <C-t>
        \ :<C-u>Unite -auto-resize -select=`tabpagenr()-1` tab<CR>
  nnoremap <silent> [Window]s
        \ :<C-u>Unite -buffer-name=files -no-split -multi-line -unique -silent
        \ jump_point file_point file_mru
        \ `finddir('.git', ';') != '' ? 'file_rec/git' : ''`
        \ buffer_tab:- file file/new<CR>
  nnoremap <silent> [Window]<Space>
        \ :<C-u>Unite -buffer-name=files -path=~/.vim/rc file_rec<CR>
  nnoremap <silent> [Window]n
        \ :<C-u>Unite -start-insert -default-action=lcd dein<CR>
  nnoremap <silent> [Window]g
        \ :<C-u>Unite -start-insert ghq<CR>
  " Tag jump.
  nnoremap <silent><expr> tt  &filetype == 'help' ?  "g\<C-]>" :
        \ ":\<C-u>UniteWithCursorWord -buffer-name=tag -immediately
        \  tag tag/include\<CR>"
  nnoremap <silent><expr> tp  &filetype == 'help' ?
        \ ":\<C-u>pop\<CR>" : ":\<C-u>Unite jump\<CR>"
  " Search.
  nnoremap <silent> /
        \ :<C-u>Unite -buffer-name=search%`bufnr('%')`
        \ -start-insert line:forward:wrap<CR>
  nnoremap <silent> *
        \ :<C-u>UniteWithCursorWord -buffer-name=search%`bufnr('%')`
        \ line:forward:wrap<CR>
  nnoremap [Alt]/       /
  nnoremap [Alt]?       ?
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
lazy = 1
on_cmd = 'Denite'
hook_source = '''
  source ~/.vim/rc/plugins/denite.rc.vim
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
lazy = 1

[[plugins]]
repo = 'Shougo/neossh.vim'
lazy = 1
on_ft = ['vimfiler', 'vimshell']

[[plugins]]
repo = 'Shougo/vimfiler.vim'
lazy = 1
depends = 'unite.vim'
on_map = {n = '<Plug>'}
on_if = "isdirectory(bufname('%'))"
hook_add = 'nnoremap <silent>   [Space]v   :<C-u>VimFiler -invisible<CR>'
hook_source = '''
call vimfiler#custom#profile('default', 'context', {
      \ 'safe' : 0,
      \ 'auto_expand' : 1,
      \ 'parent' : 0,
      \ })
let g:vimfiler_as_default_explorer = 1
if IsWindows()
  let g:vimfiler_detect_drives = [
        \ 'C:/', 'D:/', 'E:/', 'F:/', 'G:/', 'H:/', 'I:/',
        \ 'J:/', 'K:/', 'L:/', 'M:/', 'N:/']
endif
if IsWindows()
  " Use trashbox.
  let g:unite_kind_file_use_trashbox = 1
else
  " Like Textmate icons.
  let g:vimfiler_tree_leaf_icon = ' '
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_file_icon = ' '
  let g:vimfiler_readonly_file_icon = '✗'
  let g:vimfiler_marked_file_icon = '✓'
endif
autocmd MyAutoCmd FileType vimfiler call s:vimfiler_my_settings()
function! s:vimfiler_my_settings() abort "{{{
  nmap <buffer> <Tab> <Plug>(vimfiler_switch_to_other_window)
endfunction"}}}
'''

[[plugins]]
repo = 'Shougo/vimshell.vim'
lazy = 1
on_map = {n = '<Plug>'}
hook_add = 'nmap [Space]s  <Plug>(vimshell_switch)'
hook_source = 'source ~/.vim/rc/plugins/vimshell.rc.vim'

[[plugins]]
repo = 'Shougo/junkfile.vim'
lazy = 1
on_source = 'unite.vim'
hook_add = '''
  nnoremap <silent> [Window]e :<C-u>Unite junkfile/new junkfile -start-insert<CR>
'''

[[plugins]]
repo = 'Shougo/unite-outline'
lazy = 1
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
lazy = 1
on_ft = 'vim'

[[plugins]]
repo = 'Shougo/neoinclude.vim'
lazy = 1
on_if = 1

[[plugins]]
repo = 'Shougo/neco-syntax'
lazy = 1
on_source = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
repo = 'vim-jp/vital.vim'
lazy = 1

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
lazy = 1

[[plugins]]
repo = 'tsukkee/unite-tag'
lazy = 1
on_source = 'unite.vim'

[[plugins]]
repo = 'tyru/caw.vim'
lazy = 1
on_map = {nx = '<Plug>'}
hook_add = '''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> gc
      silent! xunmap <buffer> gc
      silent! nunmap <buffer> gcc
      silent! xunmap <buffer> gcc
    else
      nmap <buffer> gc <Plug>(caw:prefix)
      xmap <buffer> gc <Plug>(caw:prefix)
      nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
      xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
hook_source = '''
  let $RUST_SRC_PATH = expand('~/src/rust/src')
  let g:racer_experimental_completer = 1
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
lazy = 1
on_ft = 'rust'

[[plugins]]
repo = 'rhysd/rust-doc.vim'
lazy = 1
on_ft = 'rust'

[[plugins]]
repo = 'osyo-manga/vim-marching'
lazy = 1
on_ft = ['c', 'cpp']
if = "!has('nvim')"

[[plugins]]
repo = 'zchee/deoplete-clang'
if = "has('nvim')"
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'zchee/deoplete-jedi'
if = "has('nvim')"
on_ft = 'python'

[[plugins]]
repo = 'zchee/deoplete-go'
if = "has('nvim')"
on_i = 1
on_ft = 'go'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
if = "has('nvim')"
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  source ~/.vim/rc/plugins/deoplete.rc.vim
'''
